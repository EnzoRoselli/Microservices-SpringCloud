spring.application.name=servicio-zuul-server

#esto lo tienen todos los clientes de eureka
# manera explicita, no es obligatorio poner esto a menos que el servidor de eureka este en otra maquina
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#enrutacion de manera dinamica de cada microservicio
zuul.routes.productos.service-id=servicio-productos
zuul.routes.productos.path=/api/products/**

zuul.routes.items.service-id=servicio-items
zuul.routes.items.path=/api/items/**

zuul.routes.usuarios.service-id=servicio-usuarios
zuul.routes.usuarios.path=/api/users/**

zuul.routes.oauth.service-id=servicio-oauth
zuul.routes.oauth.path=/api/security/**
#es necesario quitar las cookies para que la autenticacion funcione
zuul.routes.oauth.sensitive-headers=Cookie,Set-Cookie

#este se utiliza para controlar el timeout de la puerta de enlace Zuul, para que espere el request un tiempo
#extra, aca se configura el Hystrix y Ribbon embebidos en Zuul
#para controlar el tiempo de espera que tienen las request
#Hystrix envuelve a Ribbon, asi que es ideal que hystrix tenga un timeout mayor que Ribbon
# Eso significa que: hystrix.**.timeoutInMilliseconds > (ribbon.ConnectTimeout + ribbon.ReadTimeout)
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 30000
ribbon.ConnectTimeout: 3000
ribbon.ReadTimeout: 10000

#Esto es necesario ya que por defecto el microservicio zipkin solo manda el 10% de las trazas
#al servidor zikpin, y queremos que lo mande el 100% de las veces
spring.sleuth.sampler.probability=1.0

#Esto no es necesario, ya que por defecto va a buscar la informacion a localhost de puerto 9411
spring.zipkin.base-url=http://localhost:9411/

#para que el microservicio mande las trazas a rabbitMQ y no directo al servidor zipkin
spring.zipkin.sender.type=rabbit